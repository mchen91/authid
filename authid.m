% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
% Created Wed Apr 02 07:18:12 EDT 2014
%
% This script assumes these variables are defined:
%
%   inputs - input data.
%   targets - target data.

data = csvread('~/Documents/authid/data.txt');

% normalize data to between 0 and 1
normalizer = max(data(:));
bias = min(data(:));
inputs = (transpose(data(:,2:end)) - bias) / (normalizer - bias);
targets = full(ind2vec(transpose(data(:,1))));

% Create a Pattern Recognition Network
hiddenLayerSize = 7;
net = patternnet(hiddenLayerSize);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 75/100;
net.divideParam.valRatio = 0/100;
net.divideParam.testRatio = 25/100;

% Train the Network
[net,tr] = train(net,inputs,targets);

% Test the Network
outputs = net(inputs);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs);

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotconfusion(targets,outputs)
%figure, plotroc(targets,outputs)
%figure, ploterrhist(errors)

% Classify new data
a = data(randi(size(data,1),1),:);
b = data(randi(size(data,1),1),:);
c = data(randi(size(data,1),1),:);
new_data = [a;b;c]';
expected = new_data(1,:);
new_data = new_data(2:end,:);

normalized_data = (new_data - bias) / (normalizer - bias);
y = sim(net, normalized_data);
[C,I] = max(y);
I
expected
