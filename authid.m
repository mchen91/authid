% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
% Created Wed Apr 02 07:18:12 EDT 2014
%
% This script assumes these variables are defined:
%
%   inputs - input data.
%   targets - target data.
[PATHSTR,NAME,EXT] = fileparts(mfilename('fullpath'));
fileName =  fullfile(PATHSTR,'data.txt');
data = csvread(fileName);

% normalize data to between 0 and 1
normalizer = max(data(:));
bias = min(data(:));
inputs = (transpose(data(:,2:end)) - bias) / (normalizer - bias);
targets = full(ind2vec(transpose(data(:,1))));

% Create a Pattern Recognition Network
hiddenLayerSize = size(inputs,1);
net = patternnet([2]);

% Setup Division of Data for Training, Validation, Testing
net.divideFcn = 'dividerand';  % Divide data randomly
net.divideMode = 'sample';  % Divide up every sample
net.divideParam.trainRatio = 75/100;
net.divideParam.valRatio = 0/100;
net.divideParam.testRatio = 25/100;

% Train the Network
net.trainFcn = 'trainlm';  % Levenberg-Marquardt
net.trainParam.min_grad = 0.000000001;
net.trainParam.epochs = 250;
net.performFcn = 'mse';  % Mean squared error
[net,tr] = train(net,inputs,targets);

% Test the Network
outputs = net(inputs);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs);

% Recalculate Training, Validation and Test Performance
trainTargets = targets .* tr.trainMask{1};
valTargets = targets  .* tr.valMask{1};
testTargets = targets  .* tr.testMask{1};
trainPerformance = perform(net,trainTargets,outputs)
valPerformance = perform(net,valTargets,outputs)
testPerformance = perform(net,testTargets,outputs)

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
% figure, plotperform(tr)
% figure, plottrainstate(tr)
figure, plotconfusion(targets,outputs)
%figure, plotroc(targets,outputs)
%figure, ploterrhist(errors)

% a = data(randi(size(data,1),1),:);
% b = data(randi(size(data,1),1),:);
% c = data(randi(size(data,1),1),:);
% new_data = [a;b;c]';
% expected = new_data(1,:)
% new_data = new_data(2:end,:);
% 
% normalized_data = (new_data - bias) / (normalizer - bias);
% y = sim(net, normalized_data);
% [C,I] = max(y);
% I
