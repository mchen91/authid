% Solve a Pattern Recognition Problem with a Neural Network
% Script generated by NPRTOOL
% Created Wed Apr 02 07:18:12 EDT 2014
%
% This script assumes these variables are defined:
%
%   inputs - input data.
%   targets - target data.

data = csvread('~/Documents/authid/data.txt');

% normalize data to between 0 and 1
normalizer = max(data(:));
bias = min(data(:));
inputs = (transpose(data(:,2:end)) - bias) / (normalizer - bias);
targets = full(ind2vec(transpose(data(:,1))));

% Create a Pattern Recognition Network
hiddenLayerSize = 7;
net = patternnet(hiddenLayerSize);

% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 75/100;
net.divideParam.valRatio = 0/100;
net.divideParam.testRatio = 25/100;

% Train the Network
[net,tr] = train(net,inputs,targets);

% Test the Network
outputs = net(inputs);
errors = gsubtract(targets,outputs);
performance = perform(net,targets,outputs)

% View the Network
%view(net)

% Plots
% Uncomment these lines to enable various plots.
%figure, plotperform(tr)
%figure, plottrainstate(tr)
%figure, plotconfusion(targets,outputs)
%figure, plotroc(targets,outputs)
%figure, ploterrhist(errors)

% Classify new data
a = [0.00900900900901,0.0036036036036,0.0,0.0018018018018,0.0,0.00540540540541,0.00900900900901,0.0,0.0018018018018,0.0018018018018,0.0018018018018,0.0,0.0108108108108,0.0,0.0,0.0126126126126,0.0036036036036,0.0018018018018,0.0,0.0,0.0018018018018,0.0,0.0108108108108,0.00540540540541,0.0,0.0036036036036,0.0036036036036,0.0126126126126,0.00900900900901,0.00720720720721,0.0,0.0036036036036,0.00540540540541,0.0036036036036,0.0216216216216,0.00540540540541,0.00540540540541,0.00540540540541,0.0036036036036,0.0036036036036,0.0,0.0,0.0018018018018,0.0162162162162,0.0,0.0036036036036,0.0,0.0,0.0108108108108,0.0,0.0018018018018,0.0036036036036,0.00540540540541,0.0036036036036,0.0,0.0036036036036,0.0018018018018,0.0036036036036,0.0,0.0216216216216,0.0,0.0018018018018,0.0,0.0,0.00900900900901,0.0036036036036,0.0018018018018,0.0018018018018,0.0,0.0108108108108,0.0018018018018]';
b = [0.00977198697068,0.00325732899023,0.0,0.00325732899023,0.00162866449511,0.0,0.00651465798046,0.00325732899023,0.00651465798046,0.0,0.00325732899023,0.0,0.0,0.00162866449511,0.00814332247557,0.00325732899023,0.00162866449511,0.00814332247557,0.00488599348534,0.0,0.00162866449511,0.0,0.00651465798046,0.00325732899023,0.0,0.00162866449511,0.00162866449511,0.00977198697068,0.00977198697068,0.0,0.00162866449511,0.00488599348534,0.00651465798046,0.00162866449511,0.00488599348534,0.00651465798046,0.00325732899023,0.014657980456,0.00325732899023,0.00162866449511,0.00488599348534,0.00651465798046,0.0,0.00162866449511,0.00325732899023,0.00651465798046,0.00977198697068,0.00162866449511,0.00814332247557,0.0,0.00814332247557,0.00162866449511,0.00651465798046,0.0114006514658,0.00325732899023,0.0,0.00814332247557,0.00162866449511,0.0,0.00488599348534,0.00977198697068,0.00162866449511,0.00651465798046,0.00325732899023,0.00162866449511,0.00651465798046,0.00651465798046,0.0,0.0,0.00325732899023,0.00162866449511]';
c = [0.00163132137031,0.00163132137031,0.0,0.00163132137031,0.00163132137031,0.00163132137031,0.0,0.00163132137031,0.0,0.0,0.00163132137031,0.00815660685155,0.00163132137031,0.00163132137031,0.0,0.0,0.00326264274062,0.00652528548124,0.0,0.00163132137031,0.00163132137031,0.0,0.0,0.00489396411093,0.00652528548124,0.0,0.00326264274062,0.00163132137031,0.00326264274062,0.00326264274062,0.0,0.0,0.00326264274062,0.00326264274062,0.00163132137031,0.00163132137031,0.00326264274062,0.00489396411093,0.00326264274062,0.00489396411093,0.00326264274062,0.0,0.0,0.0,0.00163132137031,0.00163132137031,0.00163132137031,0.0,0.00978792822186,0.00163132137031,0.00326264274062,0.00489396411093,0.00489396411093,0.00326264274062,0.0114192495922,0.00489396411093,0.00489396411093,0.00163132137031,0.0,0.00163132137031,0.00163132137031,0.0114192495922,0.00326264274062,0.00326264274062,0.00163132137031,0.0,0.00326264274062,0.00978792822186,0.0,0.00163132137031,0.00489396411093]';
new_data = [a b c];

normalized_data = (new_data - bias) / (normalizer - bias);
y = sim(net, normalized_data);
[C,I] = max(y);
I
